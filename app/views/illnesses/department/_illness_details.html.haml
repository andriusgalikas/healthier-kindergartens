.row
  %h5= t('illnesses.labels.illness_details')
.row
  .col-md-6.col-sm-6
    %h3= t('protocols.child_illness_record.illness_code')
    #search-illness-name{'data-illness_names': illness_list.to_json}
      = text_field_tag 'search-illness-name', '', placeholder: t('illnesses.labels.search'), class: 'form-control typeahead'
  .col-md-6.col-sm-6
    .radio-box-group
      - Illness.all.where(language: I18n.locale).each do |illness|
        .radio-box
          %input{:type=>"radio", :name => "record[illness_code]", :id => "chk_illness_#{illness.code}", :style => "display: none;", value: illness.code,  'data-illness_guide': illness.worker_guide.url, :required => "true"}
          %label{:for => "chk_illness_#{illness.code}"}
            = illness.name
/ .row
/   .col-md-12.text-center{style: 'margin-bottom: 10px;'}
/     %button#prev.btn.btn-gray{style: 'color: black; margin: 0 10px;'}= t('illness_guides.labels.prev')
/     %span#page_num 
/     %span /
/     %span#page_count      
/     %button#next.btn.btn-gray{style: 'color: black; margin: 0 10px;'}= t('illness_guides.labels.next')
/   .col-md-12        
/     #pdf-wrapper
/       %canvas#pdf_canvas

/ .row
/   .col-md-12
/     #symptoms

.row
  .col-md-6.col-sm-6
    .form-group.patient-count
      %label.step-instruction{for: 'workers-count'}= t('protocols.department_illness_record.sick_workers_count')
      %input{type: 'number', class: 'form-control', name: 'record[sick_workers_count]', min: '0'}
  .col-md-6.col-sm-6
    .form-group.patient-count
      %label.step-instruction{for: 'children-count'}= t('protocols.department_illness_record.sick_children_count')
      %input{type:'number', class: 'form-control', name: 'record[sick_children_count]', min: '0'}
.row
  .col-md-12
    .form-group
      %label.step-instruction= t('protocols.department_illness_record.start_date')
      = text_field_tag 'record[start_date]', '', class: 'datepicker form-control datetime-input'

    .form-group
      %label.step-instruction= t('protocols.department_illness_record.end_date')
      = text_field_tag 'record[end_date]', '', class: 'datepicker form-control datetime-input'

    .form-group
      %label.step-instruction= t('protocols.department_illness_record.possible_trigger')
      = text_area 'record', 'possible_trigger', class: 'form-control'

    .form-group
      %label.step-instruction= t('protocols.department_illness_record.extra_details')
      = text_area 'record', 'extra_details', class: 'form-control'
:javascript

  PDFJS.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
  // Using DocumentInitParameters object to load binary data.
  var guide_url = '';

  var pdfDoc = null,
      pageNum = 1,
      pageRendering = false,
      pageNumPending = null,
      scale = 1;
      //canvas = document.getElementById('pdf_canvas'),
      //ctx = canvas.getContext('2d');

  function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function(page) {
      var container_width = document.getElementById('pdf-wrapper').offsetWidth;
      var viewport = page.getViewport(scale);
      if(container_width > viewport.width){
        canvas.height = viewport.height * (container_width / viewport.width);
        canvas.width = container_width;
        viewport = page.getViewport((container_width / viewport.width));
      } else {
        canvas.height = viewport.height;
        canvas.width = viewport.width;      
      }

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(function() {
        pageRendering = false;
        if (pageNumPending !== null) {
          // New page rendering is pending
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });

    // Update page counters
    document.getElementById('page_num').textContent = pageNum;
  }

  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }

  function onPrevPage() {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  }
  //document.getElementById('prev').addEventListener('click', onPrevPage);

  function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  }
  //document.getElementById('next').addEventListener('click', onNextPage);

  jQuery(document).ready(function() {   

    document.addEventListener('contextmenu', event => event.preventDefault());  

    $('body').on('change', 'input[name="record[illness_code]"]:checked', function() {

    //  guide_url = $(this).data('illness_guide');

    //  if (guide_url){
    //    PDFJS.getDocument(guide_url).then(function(pdfDoc_) {
    //      pdfDoc = pdfDoc_;
    //      document.getElementById('page_count').textContent = pdfDoc.numPages;

    //      renderPage(pageNum);
    //    });
    //  }

    });

    $('.datepicker').datetimepicker({
      format: 'd/m/Y',
      timepicker: false,
      maxDate: new Date()
    });
  });
